ğŸ”¹ Exercise 00 â€“ Polymorphism

Dla kaÅ¼dego Ä‡wiczenia musisz dostarczyÄ‡ najbardziej kompletne testy, jakie moÅ¼esz.
Konstruktory i destruktory kaÅ¼dej klasy muszÄ… wyÅ›wietlaÄ‡ konkretne komunikaty.
Nie uÅ¼ywaj tego samego komunikatu dla wszystkich klas.

Zacznij od zaimplementowania prostej klasy bazowej o nazwie Animal.
Ma ona jeden chroniony atrybut:

std::string type;

Zaimplementuj klasÄ™ Dog, ktÃ³ra dziedziczy po Animal.
Zaimplementuj klasÄ™ Cat, ktÃ³ra dziedziczy po Animal.

Te dwie klasy pochodne muszÄ… ustawiaÄ‡ swoje pole type odpowiednio do ich nazwy.
Wtedy Dog bÄ™dzie miaÅ‚ type zainicjalizowany na "Dog", a Cat na "Cat".
Pole type klasy Animal moÅ¼e byÄ‡ puste albo ustawione na dowolnÄ… wartoÅ›Ä‡ wedÅ‚ug twojego wyboru.

KaÅ¼de zwierzÄ™ musi byÄ‡ w stanie uÅ¼ywaÄ‡ funkcji czÅ‚onkowskiej:

makeSound()
BÄ™dzie ona wypisywaÄ‡ odpowiedni dÅºwiÄ™k (koty nie szczekajÄ…).

Aby upewniÄ‡ siÄ™, Å¼e rozumiesz, jak to dziaÅ‚a, zaimplementuj klasÄ™ WrongCat, ktÃ³ra dziedziczy po klasie WrongAnimal.
JeÅ›li w powyÅ¼szym kodzie zastÄ…pisz Animal i Cat ich bÅ‚Ä™dnymi odpowiednikami, WrongCat powinien wypisaÄ‡ dÅºwiÄ™k klasy WrongAnimal.

Zaimplementuj i oddaj wiÄ™cej testÃ³w niÅ¼ te podane powyÅ¼ej.


Co masz zrobiÄ‡:
UtworzyÄ‡ klasÄ™ bazowÄ… Animal z atrybutem std::string type.
UtworzyÄ‡ klasy Dog i Cat dziedziczÄ…ce po Animal.
KaÅ¼da klasa musi mieÄ‡ metodÄ™ makeSound(), ktÃ³ra robi coÅ› innego (pies szczeka, kot miauczy).
Konstruktor Dog ustawia type na "Dog", a Cat na "Cat".

W main() stwÃ³rz obiekty Animal, Dog i Cat i sprawdÅº, Å¼e dÅºwiÄ™ki sÄ… poprawne.
UtwÃ³rz rÃ³wnieÅ¼ WrongAnimal i WrongCat, ktÃ³re pokaÅ¼Ä… brak polimorfizmu (brak wirtualnych metod â†’ wywoÅ‚a siÄ™ metoda z klasy bazowej, a nie pochodnej).

Czego siÄ™ nauczysz:
protected vs private w klasach.
Dziedziczenie w C++.
virtual przy funkcjach, Å¼eby polimorfizm dziaÅ‚aÅ‚.
WskaÅºniki do klasy bazowej pokazujÄ…ce na klasy pochodne.